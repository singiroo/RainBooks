<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="mem">

	<resultMap type="memberVO" id="member" >
		<id property="memId" column="mem_id"/>
		<result property="memCd" column="mem_cd" />
		<result property="memPass" column="mem_Pass" />
		<result property="memNm" column="mem_Nm" />
		<result property="memGender" column="mem_Gender" />
		<result property="memBir" column="mem_Bir" />
		<result property="addrSq" column="addr_Sq" />
		<result property="addrDetail" column="addr_Detail" />
		<result property="memHp" column="mem_hp" />
		<result property="memMail" column="mem_Mail" />
		<result property="eMoney" column="e_money" />
		<result property="memMile" column="mem_mile" />
	</resultMap>

	<resultMap type="addrVO" id="addr">
		<id column="addr_sq" property="addrSq" />
		<result column="addr_zip" property="addrZip" />
		<result column="addr_sido" property="addrSido" />
		<result column="addr_gugun" property="addrGugun" />
		<result column="addr_dong" property="addrDong" />
		<result column="addr_bunji" property="addrBunji" />
		<result column="addr_ri" property="addrRi" />
		<result column="addr_bldg" property="addrBldg" />
	</resultMap>
	
	<resultMap type="bookGenreVO" id="bookGenre">
		<result property="bkGreCd" column="bkgre_cd" />
		<result property="bkGreNo" column="bkgre_no" />
		<result property="bkGreNm" column="bkgre_nm" />
	</resultMap>
	
	
	<!-- id가 일치하는 회원의 정보를 가져옴 -->
	<select id="selectMemberVO" parameterType="String"
		resultMap="member">
		select * from member where mem_id = #{memId} and mem_cd=1
	</select>

	<!-- id가 일치하는 회원의 기본주소를 주소테이블에서 가져옴 -->
	<select id="selectAddrVO" parameterType="String"
		resultMap="addr">
		select A.* from addr A, (select addr_sq from member where
		mem_id = #{memId}) B
		where B.addr_sq = A.addr_sq
	</select>


	<!-- id가 일치하는 회원의 관심장르를 가져옴 -->
	<select id="selectIntrGenreList" parameterType="String"
		resultMap="bookGenre">
		select A.* from book_genre A,
		(select bkgre_cd from
		intr_genre where mem_id = #{userid})B
		where B.bkgre_cd = A.bkgre_cd
	</select>

	<!-- 새로 작성한 회원의 정보로 수정 -->
	<update id="updateMemberVO" parameterType="memVO">
		update MEMBER
		set
		MEM_PASS = #{memPass},
		MEM_NM = #{memNm},
		ADDR_SQ = #{addrSq},
		ADDR_DETAIL =
		#{addrDetail},
		MEM_HP = #{memHp},
		MEM_MAIL = #{memMail}
		where MEM_ID =
		#{memId}
	</update>

	<!-- 검색 키워드로 해당 주소 목록을 가져옴 -->
	<select id="selectAddrList" parameterType="String"
		resultMap="addr">
		select B.*
		from addr B, (select addr_sq, (addr_zip ||'
		'||addr_sido||'
		'||Addr_Gugun||' '||addr_dong) as add1 from addr ) A
		where A.add1 like '%'||#{data}||'%'
		and B.addr_sq = A.addr_sq
	</select>

	<!-- 회원 탈퇴 메서드(회원 활동 구분코드를 0으로 변경) -->
	<update id="deleteMemberVO" parameterType="String">
		update member
		set
		mem_cd = 0
		where mem_id=#{memid}
	</update>

	<!-- 회원의 이머니 정보를 수정(충전/환불)하는 메서드 -->
	<update id="updateEmoney" parameterType="memVO">
		update member
		set
		e_money = #{eMoney}
		where mem_id = #{memId}
	</update>

	<!-- 회원등록 -->
	<insert id="insertMemberInfo" parameterType="memVO">
		INSERT INTO MEMBER
		VALUES(#{memId},
		#{memCd},
		#{memPass},
		#{memNm},
		#{memGender},
		#{memBir},
		#{addrSq},
		#{addrDetail},
		#{memHp},
		#{memMail},
		#{eMoney},
		#{memMile}
		)
	</insert>

	<!-- 회원 관심장르등록 -->
	<!-- <insert id="insertIntrGre" parameterType="intrGreVO">
		INSERT INTO
		INTR_GENRE(IN_GRE_SQ ,MEM_ID,BKGRE_CD) SELECT
		NVL(MAX(IN_GRE_SQ),0)+1,#{memId},#{bkGreCd} FROM INTR_GENRE WHERE MEM_ID
		= #{memId}
	</insert> -->
	<insert id="insertIntrGre" parameterType="java.util.List">
		INSERT INTO
		INTR_GENRE(IN_GRE_SQ ,MEM_ID,BKGRE_CD) SELECT
		NVL(MAX(IN_GRE_SQ),0)+1,#{memId},#{bkGreCd} FROM INTR_GENRE WHERE MEM_ID
		= #{memId}
	</insert>
	
	
	
	
	
	
	

	<!-- ID 중복체크 -->
	<select id="checkMemberId" resultMap="member">
		SELECT * FROM MEMBER WHERE
		MEM_ID = #{memId}
	</select>

	<!-- 기본주소 검색 -->
	<select id="selectAddr" parameterType="String" resultMap="addr">
		SELECT B.* FROM ADDR B, (SELECT ADDR_SQ FROM ADDR WHERE (ADDR_SIDO ||'
		'|| ADDR_GUGUN ||' ' || ADDR_DONG) LIKE '%'||#{data}||'%')A
		WHERE
		B.ADDR_SQ = A.ADDR_SQ
	</select>
</mapper>